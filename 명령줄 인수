#include <stdio.h>#include <stdlib.h>#include <string.h>#include <ctype.h>

void count_file(FILE *fp, int *char_count, int *word_count, int *line_count) {
    int in_word = 0;
    char ch;
    
    *char_count = *word_count = *line_count = 0;
    
    while ((ch = fgetc(fp)) != EOF) {
        (*char_count)++;

        if (ch == '\n') {
            (*line_count)++;
        }

        if (isspace(ch)) {
            in_word = 0;
        } else if (!in_word) {
            in_word = 1;
            (*word_count)++;
        }
    }
}

int main(int argc, char *argv[]) {
    int char_count, word_count, line_count;
    int count_lines = 0, count_words = 0, count_chars = 0;
    FILE *fp = NULL;

    // Check command line options
    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-l") == 0) {
            count_lines = 1;
        } else if (strcmp(argv[i], "-w") == 0) {
            count_words = 1;
        } else if (strcmp(argv[i], "-c") == 0) {
            count_chars = 1;
        } else if (argv[i][0] != '-') {
            fp = fopen(argv[i], "r");
            if (fp == NULL) {
                perror("Error opening file");
                return 1;
            }
        }
    }

    // If no file is provided, use standard input
    if (fp == NULL) {
        fp = stdin;
    }

    // Count characters, words, and lines
    count_file(fp, &char_count, &word_count, &line_count);
    
    // Close the file if it was opened from disk
    if (fp != stdin) {
        fclose(fp);
    }

    // If no option is given, display all counts
    if (!count_lines && !count_words && !count_chars) {
        count_lines = count_words = count_chars = 1;
    }

    // Output based on the options provided
    if (count_lines) {
        printf("Lines: %d\n", line_count);
    }
    if (count_words) {
        printf("Words: %d\n", word_count);
    }
    if (count_chars) {
        printf("Characters: %d\n", char_count);
    }

    return 0;
}
